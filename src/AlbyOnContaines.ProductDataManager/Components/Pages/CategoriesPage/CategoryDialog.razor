@using AlbyOnContainers.ProductDataManager.Domain

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column">
            @if (Category.Id != Guid.Empty)
            {
                <MudTextField Value="@Category.Id.ToString()" Label="Identifier" ReadOnly="true"/>
            }
            <MudTextField @bind-Value="@Category.Name" Label="Name" Placeholder="Insert category name" Class="pt-2" Clearable="true" MaxLength="30"/>
            <MudTextField @bind-Value="@Category.Description" Label="Description" Placeholder="Insert category description" Class="pt-2" Clearable="true" MaxLength="512"/>
            
            <MudSelect T="bool" Value="@Category.Enabled" ValueChanged="EnableChanged" Label="Enabled" Class="pt-2">
                <MudSelectItem Value="true">Yes</MudSelectItem>
                <MudSelectItem Value="false">No</MudSelectItem>
            </MudSelect>
            
            <MudAutocomplete T="Category"
                             @bind-Value="Category.Parent"
                             SearchFunc="Search"
                             ToStringFunc="@(category => category?.Name ?? string.Empty)"
                             Variant="Variant.Text"
                             MaxItems="Int32.MaxValue"
                             Label="Parent Category"
                             Margin="Margin.None"
                             HelperText="Type at least 3 characters"
                             HelperTextOnFocus="true"
                             Clearable="true" />

        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public required IMudDialogInstance MudDialog { get; set; }
    [Parameter] public required Category Category { get; set; }
    [Parameter] public required IReadOnlyCollection<Category> Categories { get; set; } = [];

    private void EnableChanged(bool @checked)
    {
        if (@checked)
            Category.Enable();
        else
            Category.Disable();
    }

    private Task<IEnumerable<Category>> Search(string value, CancellationToken token)
    {
        var result = string.IsNullOrEmpty(value)
                   ? Categories
                   : Categories.Where(category => category.Name.Contains(value));

        return Task.FromResult(result);
    }

    void Cancel() => MudDialog.Cancel();
    void Save() => MudDialog.Close(DialogResult.Ok(Category.Id));
}