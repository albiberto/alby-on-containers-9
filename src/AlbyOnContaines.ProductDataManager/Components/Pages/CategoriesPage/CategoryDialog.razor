@using AlbyOnContainers.ProductDataManager.Domain
<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column">
            @if (Category.Id != Guid.Empty)
            {
                <MudTextField Value="@Category.Id.ToString()" Label="Identifier" ReadOnly="true"/>
            }
            <MudTextField @bind-Value="@Category.Name" Label="Name" Placeholder="Insert category name" Class="pt-2" Clearable="true" MaxLength="30"/>
            <MudTextField @bind-Value="@Category.Description" Label="Description" Placeholder="Insert category description" Class="pt-2" Clearable="true" MaxLength="512"/>

            <MudSelect T="bool" Value="@Category.Enabled" ValueChanged="EnableChanged" Label="Enabled" Class="pt-2">
                <MudSelectItem Value="true">Yes</MudSelectItem>
                <MudSelectItem Value="false">No</MudSelectItem>
            </MudSelect>

            <MudAutocomplete T="Guid?"
                             @bind-Value="@Category.ParentId"
                             SearchFunc="Search"
                             ToStringFunc="ToStringFunc"
                             Variant="Variant.Text"
                             MaxItems="int.MaxValue"
                             Label="Parent Category"
                             Margin="Margin.None"
                             Clearable="true"/>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public required IMudDialogInstance MudDialog { get; set; }
    [Parameter] public required Category Category { get; set; }
    [Parameter] public required IReadOnlyCollection<Category> Categories { get; set; } = [];

    // protected override void OnInitialized() => _selectedValue = Category.ParentId;
    //
    // Guid? _selectedValue;
    // void ValueChanged(Guid? value) => _selectedValue = value;

    private void EnableChanged(bool @checked)
    {
        if (@checked)
            Category.Enable();
        else
            Category.Disable();
    }

    private Task<IEnumerable<Guid?>> Search(string value, CancellationToken token)
    {
        var result = string.IsNullOrEmpty(value)
                         ? Categories
                         : Categories
                             .Where(category => category.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return Task.FromResult(result.Select(category => category.Id as Guid?));
    }

    private string? ToStringFunc(Guid? id) => id is null 
                                                  ? string.Empty 
                                                  : Categories.Single(category => category.Id == id).Name;
    
    void Cancel() => MudDialog.Cancel();
    void Save() => MudDialog.Close(DialogResult.Ok(Category.Id));
}