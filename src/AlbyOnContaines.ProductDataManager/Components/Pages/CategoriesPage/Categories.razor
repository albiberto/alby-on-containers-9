@page "/categories"
@using AlbyOnContainers.ProductDataManager.Domain
@using AlbyOnContainers.ProductDataManager.Infrastructure.Repositories
@using AlbyOnContaines.ProductDataManager.Components.Shared
@using AlbyOnContaines.ProductDataManager.Services

<PageTitle>Categories</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Categories</MudText>

<div class="d-flex flex-row reverse">
 <MudButton OnClick="@(() => OpenCreateCategoryDialog())" Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Outlined.AddCircleOutline">Add Category</MudButton>
 @* <MudButton OnClick="@ExpandAll" Color="Color.Secondary"  Variant="Variant.Text">Expand All</MudButton> *@
 @* <MudButton OnClick="@CollapseAll" Color="Color.Secondary" Variant="Variant.Text">Collapse All</MudButton> *@
</div>

<MudPaper Class="w-100" Elevation="0">
    <MudTextField T="string" Label="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Search" TextChanged="OnTextChanged" Immediate="false" Clearable="true"/>
    <MudTreeView @ref="_treeView" Items="@_items" FilterFunc="MatchesName" Class="w-100">
        <ItemTemplate Context="context">
            <MudTreeViewItem
                Value="@context.Value"
                Items="@context.Children"
                @bind-Expanded="@context.Expanded"
                CanExpand="@context.Expandable"
                LoadingIconColor="Color.Info">
                <BodyContent Context="item">
                    @if (item.Value!.HasChildren)
                    {
                     
                        <EditDisplay 
                            Create="@(() => OpenCreateCategoryDialog(item.Value!.Id))"
                            Edit="@(() => OpenEditCategoryDialog(item.Value!))">
                            <MudText>@item.Value!.Name</MudText>
                            <MudText>@item.Value!.Description</MudText>
                        </EditDisplay>
                    }
                    else
                    {
                        <EditDisplay 
                            Create="@(() => OpenCreateCategoryDialog(item.Value!.Id))"
                            Edit="@(() => OpenEditCategoryDialog(item.Value!))"
                            Delete="@(() => OpenDeleteCategoryDialog(item.Value!))">
                            <MudText>@item.Value!.Name</MudText>
                            <MudText>@item.Value!.Description</MudText>
                        </EditDisplay>
                    }
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {
    [Inject] CategoryRepository CategoryRepository { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;
    [Inject] CategoryDialogService CategoryDialogService { get; set; } = null!;

    MudTreeView<Category>? _treeView;

    List<TreeItemData<Category>> _items = [];
    List<Category> _categories = [];

    string _searchPhrase = string.Empty;
    

    protected override async Task OnInitializedAsync()
    {
        var categories = await CategoryRepository.ListAsync();
        
        _items = GetAllHierarchy(categories).ToList();
        _categories = categories.OrderBy(category => category.Name).ToList();
    }

    static IEnumerable<TreeItemData<Category>> GetAllHierarchy(List<Category> categories)
    {
        var lookup = categories.ToLookup(c => c.ParentId);
    
        foreach (var item in BuildTree(null))yield return item;

        yield break;

        IEnumerable<TreeItemData<Category>> BuildTree(Guid? parentId)
        {
            foreach (var category in lookup[parentId].OrderBy(c => c.Name))
            {
                var children = BuildTree(category.Id).ToList();
                var item = new TreeItemData<Category>
                {
                    Text = category.Name,
                    Value = category,
                    Expandable = children.Any(),
                    Children = children
                };
                yield return item;
            }
        }
    }
    
    async Task OnTextChanged(string searchPhrase)
    {
        _searchPhrase = searchPhrase;
        if (_treeView is not null) await _treeView.FilterAsync();
    }

    Task<bool> MatchesName(TreeItemData<Category> item)
    {
        var match = string.IsNullOrEmpty(item.Text) || item.Text.Contains(_searchPhrase, StringComparison.OrdinalIgnoreCase);
        return Task.FromResult(match);
    }

    async Task OpenCreateCategoryDialog(Guid? parentId = null)
    {
        await CategoryDialogService.OpenCreateCategoryDialog("Creare Category", _categories, parentId);
        StateHasChanged();
    }

    async Task OpenEditCategoryDialog(Category category)
    {
        await CategoryDialogService.OpenEditCategoryDialog("Edit Category", _categories, category);
        StateHasChanged();
    }

    async Task OpenDeleteCategoryDialog(Category category)
    {
        await CategoryDialogService.OpenDeleteDialogAsync(category, "Delete", $@"Do you really want to delete ""{category.Name}"" category? This process cannot be undone.", "Delete Category?");
        StateHasChanged();
    }
}