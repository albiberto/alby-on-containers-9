@page "/categories"
@using AlbyOnContainers.ProductDataManager.Commands
@using AlbyOnContainers.ProductDataManager.Domain
@using AlbyOnContainers.ProductDataManager.Queries
@using AlbyOnContaines.ProductDataManager.Components.Shared
@using AlbyOnContaines.ProductDataManager.Services

<PageTitle>Categories</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Categories</MudText>

<div class="d-flex flex-row reverse">
 <MudButton OnClick="@(() => OpenCreateCategoryDialog())" Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Outlined.AddCircleOutline">Add Category</MudButton>
 <MudButton OnClick="@ExpandAll" Color="Color.Secondary"  Variant="Variant.Text">Expand All</MudButton>
 <MudButton OnClick="@CollapseAll" Color="Color.Secondary" Variant="Variant.Text">Collapse All</MudButton>
</div>

<MudPaper Class="w-100" Elevation="0">
    <MudTextField T="string" Label="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Search" TextChanged="OnTextChanged" Immediate="false" Clearable="true"/>
    <MudTreeView @ref="_treeView" ServerData="@LoadServerData" Items="@InitialTreeItems" FilterFunc="MatchesName" Class="w-100">
        <ItemTemplate Context="context">
            <MudTreeViewItem
                Value="@context.Value"
                Items="@context.Children"
                ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<Category>>>(items => OnItemsLoaded(context, items)))"
                @bind-Expanded="@context.Expanded"
                CanExpand="@context.Expandable"
                LoadingIconColor="Color.Info">
                <BodyContent Context="item">
                    @if (item.Value!.HasChildren)
                    {
                     
                        <EditDisplay 
                            Create="@(() => OpenCreateCategoryDialog(item.Value!.Id))"
                            Edit="@(() => OpenEditCategoryDialog(item.Value!))">
                            <MudText>@item.Value!.Name</MudText>
                            <MudText>@item.Value!.Description</MudText>
                        </EditDisplay>
                    }
                    else
                    {
                        <EditDisplay 
                            Create="@(() => OpenCreateCategoryDialog(item.Value!.Id))"
                            Edit="@(() => OpenEditCategoryDialog(item.Value!))"
                            Delete="@(() => OpenDeleteCategoryDialog(item.Value!))">
                            <MudText>@item.Value!.Name</MudText>
                            <MudText>@item.Value!.Description</MudText>
                        </EditDisplay>
                    }
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {
    [Inject] CategoryQueries Queries { get; set; } = null!;
    [Inject] CategoryCommands Commands { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;
    [Inject] CategoryDialogService CategoryDialogService { get; set; } = null!;

    MudTreeView<Category>? _treeView;
    List<TreeItemData<Category>> InitialTreeItems { get; set; } = [];
    string _searchPhrase = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // InitialTreeItems = await Queries.GetAllHierarchy().ToListAsync();

        InitialTreeItems = await Queries.GetAllParents().ToListAsync();
    }

    async Task<IReadOnlyCollection<TreeItemData<Category>>> LoadServerData(Category parent) => await Queries.GetAllChildren(parent.Id).ToListAsync();

    static void OnItemsLoaded(TreeItemData<Category> treeItemData, IReadOnlyCollection<TreeItemData<Category?>>? children) =>
        treeItemData.Children = (children?.ToList() ?? [])!;

    async Task OnTextChanged(string searchPhrase)
    {
        _searchPhrase = searchPhrase;
        if (_treeView is not null) await _treeView.FilterAsync();
    }

    Task<bool> MatchesName(TreeItemData<Category> item)
    {
        var filterd = string.IsNullOrEmpty(item.Text) || item.Text.Contains(_searchPhrase, StringComparison.OrdinalIgnoreCase);
        return Task.FromResult(filterd);
    }

    async Task ExpandAll()
    {
        InitialTreeItems = await Queries.GetAllHierarchy().ToListAsync();
        StateHasChanged();
        _treeView?.ExpandAllAsync();
    }

    Task CollapseAll() => _treeView?.CollapseAllAsync() ?? Task.CompletedTask;

    Task OpenCreateCategoryDialog(Guid? parentId = null) => CategoryDialogService.OpenCreateCategoryDialog("Creare Category", parentId);
    Task OpenEditCategoryDialog(Category category) => CategoryDialogService.OpenEditCategoryDialog("Edit Category", category);
    Task OpenDeleteCategoryDialog(Category category) => CategoryDialogService.OpenDeleteDialogAsync(category,"Delete", "Do you really want to delete these records? This process cannot be undone.", "Delete Category?");
}