@page "/categories"
@using AlbyOnContainers.ProductDataManager.Commands
@using AlbyOnContainers.ProductDataManager.Domain
@using AlbyOnContainers.ProductDataManager.Queries

<PageTitle>Categories</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Categories</MudText>

<MudButton OnClick="@(() => OpenCategoryDialog("Create Category"))" Variant="Variant.Outlined" Color="Color.Primary" EndIcon="@Icons.Material.Outlined.AddCircleOutline">Add Category</MudButton>

<MudPaper Class="w-100" Elevation="0">
    <MudTextField T="string" Label="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Search" TextChanged="OnTextChanged" Immediate="true" Clearable="true"/>
    <MudTreeView @ref="_treeView" ServerData="@LoadServerData" Items="@InitialTreeItems" FilterFunc="MatchesName" Class="w-100">
        <ItemTemplate Context="context">
            <MudTreeViewItem
                Value="@context.Value"
                Items="@context.Children"
                ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<Category>>>(items => OnItemsLoaded(context, items)))"
                @bind-Expanded="@context.Expanded"
                CanExpand="@context.Expandable"
                LoadingIconColor="Color.Info">
                <BodyContent Context="item">
                    <EditDisplay Parent="@item.Value">
                        <MudText>@item.Value!.Name</MudText>
                        <MudText>@item.Value!.Description</MudText>
                    </EditDisplay>
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {
    [Inject] CategoryQueries Queries { get; set; } = null!;
    [Inject] CategoryCommands Commands { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;
    [Inject] IDialogService Dialog { get; set; } = null!;

    private List<TreeItemData<Category>> InitialTreeItems { get; set; } = [];
    private MudTreeView<Category>? _treeView;
    private string _searchPhrase = string.Empty;

    protected override async Task OnInitializedAsync() => InitialTreeItems = await Queries.GetAllParents();

    async Task<IReadOnlyCollection<TreeItemData<Category>>> LoadServerData(Category parent) => await Queries.GetAllChildren(parent.Id);

    static void OnItemsLoaded(TreeItemData<Category> treeItemData, IReadOnlyCollection<TreeItemData<Category?>>? children) =>
        treeItemData.Children = children?.ToList() ?? [];

    async Task OnTextChanged(string searchPhrase)
    {
        _searchPhrase = searchPhrase;
        if (_treeView is not null) await _treeView.FilterAsync();
    }

    private Task<bool> MatchesName(TreeItemData<Category> item) =>
        Task.FromResult(string.IsNullOrEmpty(item.Text) || item.Text.Contains(_searchPhrase, StringComparison.OrdinalIgnoreCase));

    private async Task OpenCategoryDialog(string title, Category? category = null)
    {
        category ??= new();
        
        var parameters = new DialogParameters<CategoryDialog> { { x => x.Category, category } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        
        var dialog = await Dialog.ShowAsync<CategoryDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled ?? false) return;
        
        await Commands.CreateRootCategoryAsync(category);
    }
}