@page "/descriptions"

<PageTitle>Descriptions</PageTitle>

@using AlbyOnContainers.ProductDataManager.Domain
@using AlbyOnContainers.ProductDataManager.Infrastructure.Repositories
@using AlbyOnContaines.ProductDataManager.Services
@using AlbyOnContaines.ProductDataManager.Specifications

<MudPaper Class="w-100 mb-2" Elevation="0">
    <div class="d-flex mb-2">
        <MudButton OnClick="@(() => OpenCreateTypeDialog())" Color="Color.Primary" Variant="Variant.Text" EndIcon="@Icons.Material.Outlined.AddCircleOutline" Class="me-auto">
            Add Description
        </MudButton>
    </div>
</MudPaper>

<MudPaper Class="w-100" Elevation="0">
    <MudDataGrid @ref="_dataGrid" T="DescriptionType" ServerData="ServerReload" SortMode="SortMode.Multiple">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Description Types</MudText>
            <MudSpacer/>
            <MudTextField T="string"
                          ValueChanged="@(s => OnSearch(s))"
                          Placeholder="Search"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Outlined.Search"
                          IconSize="Size.Medium"
                          Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn />
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.Description"/>
            <PropertyColumn Property="x => x.Enabled"/>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => OpenEditTypeDialog(@context.Item))"/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudTabs > 
                <MudTabPanel Icon="@Icons.Material.Outlined.Category" Text="Categories">
                    <MudText>Content One</MudText>
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Outlined.Description" Text="Values">
                    <DescriptionValues Values="@context.Item.Values"></DescriptionValues>
                </MudTabPanel>
            </MudTabs>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="DescriptionType"/>
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    [Inject] DescriptionRepository Repository { get; set; } = null!;
    [Inject] DescriptionTypesDialogService DescriptionDialog { get; set; } = null!;
    
    MudDataGrid<DescriptionType>? _dataGrid;
    string _searchString = string.Empty;

    private async Task<GridData<DescriptionType>> ServerReload(GridState<DescriptionType> state)
    {
        var items = await Repository.ListAsync(new DescriptionGridSpecification(state, _searchString));
        
        return new()
        {
            TotalItems = await Repository.CountAsync(),
            Items = items
        };
    }

    private Task OnSearch(string text)
    {
        _searchString = text;
        return _dataGrid?.ReloadServerData() ?? Task.CompletedTask;
    }
    
    async Task OpenCreateTypeDialog()
    {
        var category = await DescriptionDialog.OpenDialog("Creare Type");

        if (category is null) return;

        if(_dataGrid is not null) await _dataGrid.ReloadServerData();
    }
    
    async Task OpenEditTypeDialog(DescriptionType type)
    {
        await DescriptionDialog.OpenDialog("Edit Type ", type);
        StateHasChanged();
    }
}