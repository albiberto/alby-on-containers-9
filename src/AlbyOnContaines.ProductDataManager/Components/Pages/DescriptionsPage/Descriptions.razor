@page "/descriptions"
@using AlbyOnContaines.ProductDataManager.Components.Shared

<PageTitle>Descriptions</PageTitle>

@using AlbyOnContainers.ProductDataManager.Domain
@using AlbyOnContainers.ProductDataManager.Infrastructure.Repositories
@using AlbyOnContaines.ProductDataManager.Specifications

<MudDataGrid @ref="_dataGrid" T="DescriptionType" ServerData="ServerReload" SortMode="SortMode.Multiple" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField T="string" 
                      ValueChanged="@(s=>OnSearch(s))" 
                      Placeholder="Search" 
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Outlined.Search" 
                      IconSize="Size.Medium" 
                      Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.Enabled" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="DescriptionType" />
    </PagerContent>
</MudDataGrid>

@code {
    [Inject] DescriptionRepository Repository { get; set; } = null!;
    
    MudDataGrid<DescriptionType>? _dataGrid;
    string _searchString = string.Empty;

    private async Task<GridData<DescriptionType>> ServerReload(GridState<DescriptionType> state)
    {
        var items = await Repository.ListAsync(new DescriptionGridSpecification(state, _searchString));
        
        return new()
        {
            TotalItems = await Repository.CountAsync(),
            Items = items
        };
    }

    private Task OnSearch(string text)
    {
        _searchString = text;
        return _dataGrid?.ReloadServerData() ?? Task.CompletedTask;
    }
}