@using AlbyOnContainers.ProductDataManager.Commands
@using AlbyOnContainers.ProductDataManager.Domain
@using AlbyOnContaines.ProductDataManager.Components.Pages.CategoriesPage
<div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
    <div style="display: flex; gap: 1.25rem;">
        @ChildContent
    </div>

    <!-- Pulsanti -->
    <div style="display: flex; gap: 1rem;">
        <MudIconButton Icon="@Icons.Material.Outlined.AddCircleOutline" Size="Size.Medium" Color="Color.Inherit" OnClick="@(() => OpenCategoryDialog("Edit Category"))"/>
        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="Size.Medium" Color="Color.Inherit" OnClick="() => Edit()"/>
        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Medium" Color="Color.Inherit" OnClick="() => Delete()"/>
    </div>
</div>

@code {
    [Inject] CategoryCommands Commands { get; set; } = null!;
    [Inject] IDialogService Dialog { get; set; } = null!;

    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public required Category Parent { get; set; }

    private void Edit() => Console.WriteLine("Modifica");
    private void Delete() => Console.WriteLine("Elimina");
    
    private async Task OpenCategoryDialog(string title)
    {
        var category = new Category();
        
        var parameters = new DialogParameters<CategoryDialog> { { x => x.Category, category } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        
        var dialog = await Dialog.ShowAsync<CategoryDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled ?? false) return;
        
        await Commands.CreateChildCategoryAsync(Parent, category);
    }
}